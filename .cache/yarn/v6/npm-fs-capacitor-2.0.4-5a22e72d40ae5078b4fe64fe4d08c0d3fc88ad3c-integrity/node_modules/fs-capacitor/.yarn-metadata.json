{
  "manifest": {
    "name": "fs-capacitor",
    "version": "2.0.4",
    "description": "Filesystem-buffered, passthrough stream that buffers indefinitely rather than propagate backpressure from downstream consumers.",
    "license": "MIT",
    "author": {
      "name": "Mike Marcacci",
      "email": "mike.marcacci@gmail.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/mike-marcacci/fs-capacitor.git"
    },
    "homepage": "https://github.com/mike-marcacci/fs-capacitor#readme",
    "bugs": {
      "url": "https://github.com/mike-marcacci/fs-capacitor/issues"
    },
    "keywords": [
      "stream",
      "buffer",
      "file",
      "split",
      "clone"
    ],
    "files": [
      "lib",
      "!lib/test.*"
    ],
    "main": "lib",
    "engines": {
      "node": ">=8.5"
    },
    "browserslist": "node >= 8.5",
    "devDependencies": {
      "@babel/cli": "^7.1.2",
      "@babel/core": "^7.3.3",
      "@babel/preset-env": "^7.4.4",
      "babel-eslint": "^10.0.1",
      "eslint": "^5.14.1",
      "eslint-config-env": "^5.0.0",
      "eslint-config-prettier": "^4.0.0",
      "eslint-plugin-import": "^2.16.0",
      "eslint-plugin-import-order-alphabetical": "^0.0.2",
      "eslint-plugin-node": "^9.0.1",
      "eslint-plugin-prettier": "^3.0.0",
      "husky": "^2.2.0",
      "if-ver": "^1.1.0",
      "leaked-handles": "^5.2.0",
      "lint-staged": "^8.1.4",
      "prettier": "^1.16.4",
      "tap": "^13.1.2"
    },
    "scripts": {
      "prepare": "npm run prepare:clean && npm run prepare:mjs && npm run prepare:js && npm run prepare:prettier",
      "prepare:clean": "rm -rf lib",
      "prepare:mjs": "BABEL_ESM=1 babel src -d lib --keep-file-extension",
      "prepare:js": "babel src -d lib",
      "prepare:prettier": "prettier 'lib/**/*.{mjs,js}' --write",
      "test": "npm run test:eslint && npm run test:prettier && npm run test:mjs && npm run test:js",
      "test:eslint": "eslint . --ext mjs,js",
      "test:prettier": "prettier '**/*.{json,yml,md}' -l",
      "test:mjs": "if-ver -lt 12 || exit 0; node --experimental-modules --no-warnings lib/test | tap-mocha-reporter classic",
      "test:js": "node lib/test | tap-mocha-reporter classic",
      "prepublishOnly": "npm test"
    },
    "_registry": "npm",
    "_loc": "/home/tel/.cache/yarn/v6/npm-fs-capacitor-2.0.4-5a22e72d40ae5078b4fe64fe4d08c0d3fc88ad3c-integrity/node_modules/fs-capacitor/package.json",
    "readmeFilename": "readme.md",
    "readme": "[![Build status](https://travis-ci.org/mike-marcacci/fs-capacitor.svg?branch=master)](https://travis-ci.org/mike-marcacci/fs-capacitor) [![Current version](https://badgen.net/npm/v/fs-capacitor)](https://npm.im/fs-capacitor) ![Supported Node.js versions](https://badgen.net/npm/node/fs-capacitor)\n\n# FS Capacitor\n\nFS Capacitor is a filesystem buffer for finite node streams. It supports simultaneous read/write, and can be used to create multiple independent readable streams, each starting at the beginning of the buffer.\n\nThis is useful for file uploads and other situations where you want to avoid delays to the source stream, but have slow downstream transformations to apply:\n\n```js\nimport fs from \"fs\";\nimport http from \"http\";\nimport WriteStream from \"fs-capacitor\";\n\nhttp.createServer((req, res) => {\n  const capacitor = new WriteStream();\n  const destination = fs.createReadStream(\"destination.txt\");\n\n  // pipe data to the capacitor\n  req.pipe(capacitor);\n\n  // read data from the capacitor\n  capacitor\n    .createReadStream()\n    .pipe(/* some slow Transform streams here */)\n    .pipe(destination);\n\n  // read data from the very beginning\n  setTimeout(() => {\n    capacitor.createReadStream().pipe(/* elsewhere */);\n\n    // you can destroy a capacitor as soon as no more read streams are needed\n    // without worrying if existing streams are fully consumed\n    capacitor.destroy();\n  }, 100);\n});\n```\n\nIt is especially important to use cases like [`graphql-upload`](https://github.com/jaydenseric/graphql-upload) where server code may need to stash earler parts of a stream until later parts have been processed, and needs to attach multiple consumers at different times.\n\nFS Capacitor creates its temporary files in the directory ideneified by `os.tmpdir()` and attempts to remove them:\n\n- after `readStream.destroy()` has been called and all read streams are fully consumed or destroyed\n- before the process exits\n\nPlease do note that FS Capacitor does NOT release disk space _as data is consumed_, and therefore is not suitable for use with infinite streams or those larger than the filesystem.\n\n## API\n\n### WriteStream\n\n`WriteStream` inherets all the methods of [`fs.WriteStream`](https://nodejs.org/api/fs.html#fs_class_fs_writestream)\n\n#### `new WriteStream()`\n\nCreate a new `WriteStream` instance.\n\n#### `.createReadStream(): ReadStream`\n\nCreate a new `ReadStream` instance attached to the `WriteStream` instance.\n\nOnce a `WriteStream` is fully destroyed, calling `.createReadStream()` will throw a `ReadAfterDestroyedError` error.\n\nAs soon as a `ReadStream` ends or is closed (such as by calling `readStream.destroy()`), it is detached from its `WriteStream`.\n\n#### `.destroy(error?: ?Error): void`\n\n- If `error` is present, `WriteStream`s still attached are destroyed with the same error.\n- If `error` is null or undefined, destruction of underlying resources is delayed until no `ReadStream`s are attached the `WriteStream` instance.\n\n### ReadStream\n\n`ReadStream` inherets all the methods of [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream).\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fs-capacitor/-/fs-capacitor-2.0.4.tgz#5a22e72d40ae5078b4fe64fe4d08c0d3fc88ad3c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fs-capacitor/-/fs-capacitor-2.0.4.tgz",
    "hash": "5a22e72d40ae5078b4fe64fe4d08c0d3fc88ad3c",
    "integrity": "sha512-8S4f4WsCryNw2mJJchi46YgB6CR5Ze+4L1h8ewl9tEpL4SJ3ZO+c/bS4BWhB8bK+O3TMqhuZarTitd0S0eh2pA==",
    "registry": "npm",
    "packageName": "fs-capacitor",
    "cacheIntegrity": "sha512-8S4f4WsCryNw2mJJchi46YgB6CR5Ze+4L1h8ewl9tEpL4SJ3ZO+c/bS4BWhB8bK+O3TMqhuZarTitd0S0eh2pA== sha1-WiLnLUCuUHi0/mT+TQjA0/yIrTw="
  },
  "registry": "npm",
  "hash": "5a22e72d40ae5078b4fe64fe4d08c0d3fc88ad3c"
}