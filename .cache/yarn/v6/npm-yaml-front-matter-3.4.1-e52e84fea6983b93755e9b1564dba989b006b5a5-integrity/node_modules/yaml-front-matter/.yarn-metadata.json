{
  "manifest": {
    "author": {
      "name": "Derek Worthen"
    },
    "license": "MIT",
    "name": "yaml-front-matter",
    "description": "yaml front matter for JS. Parse yaml or JSON from the beginning of files.",
    "version": "3.4.1",
    "keywords": [
      "yaml"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dworthen/js-yaml-front-matter"
    },
    "dependencies": {
      "commander": "1.0.0",
      "js-yaml": "^3.5.2"
    },
    "devDependencies": {
      "browser-sync": "^2.11.1",
      "gulp": "^3.9.0",
      "gulp-concat": "^2.6.0",
      "gulp-rename": "^1.2.2",
      "gulp-sourcemaps": "^1.6.0",
      "gulp-uglify": "^1.5.1",
      "mocha": "~1.3.0",
      "should": "0.6.3"
    },
    "bin": {
      "yaml-front-matter": "bin/js-yaml-front.js"
    },
    "scripts": {
      "test": "mocha -u bdd --reporter spec",
      "start": "gulp serve"
    },
    "_registry": "npm",
    "_loc": "/home/tel/.cache/yarn/v6/npm-yaml-front-matter-3.4.1-e52e84fea6983b93755e9b1564dba989b006b5a5-integrity/node_modules/yaml-front-matter/package.json",
    "readmeFilename": "README.md",
    "readme": "# Yaml Front Matter\n\nParses yaml or json at the front of a string. Places the parsed content, plus the rest of the string content, into an object literal.\n\n[Online Demo](https://dworthen.github.io/js-yaml-front-matter/).\n\n#### Breaking Changes\n\nThis readme is for the 4.x branch which introduces breaking changes. View the [changelog](CHANGELOG.md) for more information.\n\n[3.x readme](https://github.com/dworthen/js-yaml-front-matter/tree/v3.4.0)\n\n## Example\n\nThis\n\n```yaml\n---\nname: Derek Worthen\nage: young\ncontact:\n  email: email@domain.com\n  address: some location\npets:\n  - cat\n  - dog\n  - bat\nmatch: !!js/regexp /pattern/gim\nrun: !!js/function function() { }\n---\nSome Other content\n```\n\nbecomes\n\n```js\n{ \n    name: 'Derek Worthen',\n    age: 'young',\n    contact: { email: 'email@domain.com', address: 'some location' },\n    pets: [ 'cat', 'dog', 'bat' ],\n    match: /pattern/gim,\n    run: [Function],\n    __content: '\\nSome Other Content' \n}\n```\n\nMay also use JSON\n\n```json\n---\n{\n    \"name\": \"Derek Worthen\",\n    \"age\": \"young\",\n    \"anArray\": [\"one\",\"two\"],\n    \"subObj\":{\"field1\": \"one\"}\n}\n---\nSome content\n```\n\n> __NOTE:__ The `---` are required to denote the start and end of front matter. There must be a newline after the opening `---` and a newline preceding the closing `---`.\n\n## Install\n\n#### npm\n\n```shell\n$ npm install yaml-front-matter@next\n```\n\nUse the `-g` flag if you plan on using the command line tool.\n\n```shell\n$ npm install yaml-front-matter -g\n```\n    \n#### Browser\n\nInclude the client script from [dist/yamlFront.js](dist/yamlFront.js). The library will be exposed as a global, `yamlFront`. The client script for [js-yaml](https://github.com/nodeca/js-yaml) is also required. May need to load espirma for some use cases. See [js-yaml](https://github.com/nodeca/js-yaml) for more information.\n\n```html\n<script src=\"https://unpkg.com/js-yaml@3.10.0/dist/js-yaml.js\"></script>\n<script src=\"js-yaml-front-client.min.js\"></script>\n<script>\n  // parse front matter with yamlFront.loadFront(String);\n</script>\n```\n\n## Running the Browser Example\n\n```shell\n$ npm install --dev && npm start\n```\n\nThen visit `localhost:8080`.\n\n## Building from source\n\nOutputs client files in `dist/`.\n\n```shell\n$ npm install --dev && npm run build\n```\n\n## Running Tests\n\n```shell\nnpm install --dev && npm test\n```\n\n## Command Line\n\n```shell\nUsage: yaml-front-matter [options] <yaml-front-matter content>\n\nOptions:\n\n-h, --help            output usage information\n-v, --version         output the version number\n-c, --content [name]  set the property name for the files contents [__content]\n--pretty              formats json output with spaces. \n```\n\n> **Note** The cli uses `safeLoadFront` and therefore the cli cannot parse yaml containing regexps, functions or undefined values.\n\n## JS-YAML\n\nYaml front matter wraps [js-yaml](https://github.com/nodeca/js-yaml) to support parsing yaml front-matter.\n\n## API\n\n### loadFront(string, [options])\n\n```js\nvar yamlFront = require('yaml-front-matter')\n  , input = [\n        '---\\npost: title one\\n',\n        'anArray:\\n - one\\n - two\\n',\n        'subObject:\\n prop1: cool\\n prop2: two',\n        '\\nreg: !!js/regexp /pattern/gim',\n        '\\nfun: !!js/function function() {  }\\n---\\n',\n        'content\\nmore'\n    ].join('');\n\nvar results = yamlFront.loadFront(input);\nconsole.log(results);\n```\n\nthe above will produce the following in the console.\n\n```shell\n{ post: 'title one',\n  anArray: [ 'one', 'two' ],\n  subObject: { obj1: 'cool', obj2: 'two' },\n  reg: /pattern/gim,\n  fun: [Function],\n  __content: '\\ncontent\\nmore' }\n```\n\nThe front-matter is optional.\n\n```\nfrontMatter.loadFront('Hello World');\n```\n\nWill produce\n\n```js\n{ __content: \"Hello World!\" }\n```\n\nContent all together is optional\n\n```js\nfrontMatter.loadFront('');\n// will produce { __content: '' }\n```\n\n### safeLoadFront(string, [options])\n\nSame api as loadFront except it does not support regexps, functions and undefined. See [js-yaml](https://github.com/nodeca/js-yaml) for more information.\n\n### Options\n\nThe options object supports the same options available to [js-yaml](https://github.com/nodeca/js-yaml) except adds support for an additional key.\n\n- `options.contentKeyName`: Specify the object key where the remaining string content after parsing the yaml front-matter will be stored. defaults to `__content`.\n\n```js\nyamlFront.loadFront('Hello World', {\n    contentKeyName: 'fileContents' \n});\n// => { fileContents: \"Hello World\" }\n```\n",
    "licenseText": "Copyright (c) 2012 - 2016 Derek Worthen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/yaml-front-matter/-/yaml-front-matter-3.4.1.tgz#e52e84fea6983b93755e9b1564dba989b006b5a5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/yaml-front-matter/-/yaml-front-matter-3.4.1.tgz",
    "hash": "e52e84fea6983b93755e9b1564dba989b006b5a5",
    "integrity": "sha1-5S6E/qaYO5N1XpsVZNupibAGtaU=",
    "registry": "npm",
    "packageName": "yaml-front-matter",
    "cacheIntegrity": "sha512-/sDeHR8GD6JIJ8j/2h28QsjXS9XsWp2WnjU8RQODri/u6INSEF9Q5w4mZVl0KtXsM1UCBYQhOwTvJKTsnmusBQ== sha1-5S6E/qaYO5N1XpsVZNupibAGtaU="
  },
  "registry": "npm",
  "hash": "e52e84fea6983b93755e9b1564dba989b006b5a5"
}