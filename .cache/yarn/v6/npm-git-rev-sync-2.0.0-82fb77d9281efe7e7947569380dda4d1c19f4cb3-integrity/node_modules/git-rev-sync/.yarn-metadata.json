{
  "manifest": {
    "name": "git-rev-sync",
    "version": "2.0.0",
    "author": {
      "name": "kurttheviking"
    },
    "bugs": {
      "url": "https://github.com/kurttheviking/git-rev-sync-js/issues"
    },
    "contributors": [
      {
        "name": "Kurt Ericson",
        "email": "github@kurttheviking.com",
        "url": "https://github.com/kurttheviking"
      },
      {
        "name": "Jason Denizac",
        "email": "jason@denizac.org",
        "url": "http://jden.us"
      },
      {
        "name": "Thomas Blobaum",
        "email": "tblobaum@gmail.com",
        "url": "https://github.com/tblobaum"
      },
      {
        "name": "Henrik Raitasola",
        "url": "https://github.com/henrikra"
      },
      {
        "name": "Jan Nicklas",
        "url": "https://github.com/jantimon"
      },
      {
        "name": "Hendrik Reker",
        "email": "reker.opensource@gmail.com",
        "url": "https://github.com/reker-"
      },
      {
        "name": "Kevin Yanuk",
        "url": "https://github.com/fugwenna"
      },
      {
        "name": "Lorenz Gardner",
        "url": "https://github.com/LorenzGardner"
      },
      {
        "name": "Colton Clemmer",
        "url": "https://github.com/orbweaver-"
      },
      {
        "name": "Tiberiu Zuld",
        "url": "https://github.com/tiberiuzuld"
      }
    ],
    "description": "Synchronously get the current git commit hash, tag, or branch",
    "homepage": "https://github.com/kurttheviking/git-rev-sync-js",
    "license": "MIT",
    "main": "index.js",
    "scripts": {
      "examples": "node examples/simple",
      "examples-extended": "node examples/extended",
      "test": "node tests/index"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:kurttheviking/git-rev-sync-js.git"
    },
    "dependencies": {
      "escape-string-regexp": "1.0.5",
      "graceful-fs": "4.1.15",
      "shelljs": "0.7.7"
    },
    "devDependencies": {},
    "_registry": "npm",
    "_loc": "/home/tel/.cache/yarn/v6/npm-git-rev-sync-2.0.0-82fb77d9281efe7e7947569380dda4d1c19f4cb3-integrity/node_modules/git-rev-sync/package.json",
    "readmeFilename": "README.md",
    "readme": "git-rev-sync [![Build Status](https://travis-ci.org/kurttheviking/git-rev-sync-js.svg?branch=master)](https://travis-ci.org/kurttheviking/git-rev-sync-js)\n============\n\nSynchronously get the current git commit hash, tag, count, branch or commit message. Forked from [git-rev](https://github.com/tblobaum/git-rev).\n\n\n## Example\n\n```js\nvar git = require('git-rev-sync');\n\nconsole.log(git.short());\n// 75bf4ee\n\nconsole.log(git.long());\n// 75bf4eea9aa1a7fd6505d0d0aa43105feafa92ef\n\nconsole.log(git.branch());\n// master\n```\n\nYou can also run these examples via: `npm run examples`\n\n\n## Install\n\n`npm install git-rev-sync --save`\n\n\n## API\n\n``` js\nvar git = require('git-rev-sync');\n```\n\n#### `git.short([filePath], [length])` &rarr; &lt;String&gt;\n\nreturn the result of `git rev-parse --short HEAD`\n\n- optional `filePath` parameter can be used to run the command against a repo outside the current working directory\n- optional `length` parameter can be used to set the desired hash length (defaults to `7`)\n\n#### `git.long([filePath])` &rarr; &lt;String&gt;\n\nreturn the result of `git rev-parse HEAD`; optional `filePath` parameter can be used to run the command against a repo outside the current working directory\n\n#### `git.branch([filePath])` &rarr; &lt;String&gt;\n\nreturn the current branch; optional `filePath` parameter can be used to run the command against a repo outside the current working directory\n\n#### `git.count()` &rarr; &lt;Number&gt;\n\nreturn the count of commits across all branches; this method will fail if the `git` command is not found in `PATH`\n\n#### `git.date()` &rarr; &lt;Date&gt;\n\nreturns the date of the current commit; this method will fail if the `git` command is not found in `PATH`\n\n#### `git.hasUnstagedChanges()` &rarr; &lt;Boolean&gt;\n\nreturns true if there are unstaged changes; this method will fail if the `git` command is not found in `PATH`\n\n#### `git.isDrty()` &rarr; &lt;Boolean&gt;\n\nreturns true if there are uncommitted changes; this method will fail if the `git` command is not found in `PATH`\n\n#### `git.isTagDirty()` &rarr; &lt;Boolean&gt;\n\nreturns true if the current tag is dirty; this method will fail if the `git` command is not found in `PATH`\n\n#### `git.message()` &rarr; &lt;String&gt;\n\nreturn the current commit message; this method will fail if the `git` command is not found in `PATH`\n\n#### `git.remoteUrl()` &rarr; &lt;String&gt;\n\nreturn the current remote URL; this method will fail if the `git` command is not found in `PATH`\n\n#### `git.tag([markDirty])` &rarr; &lt;String&gt;\n\nreturn the current tag and mark as dirty if markDirty is truthful; this method will fail if the `git` command is not found in `PATH`\n\n\n## License\n\n[MIT](https://github.com/kurttheviking/git-rev-sync/blob/master/LICENSE)\n\n\n## Donations\n\n[We're all in this together](https://cash.me/$kurttheviking)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 - Present Kurt Ericson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/git-rev-sync/-/git-rev-sync-2.0.0.tgz#82fb77d9281efe7e7947569380dda4d1c19f4cb3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/git-rev-sync/-/git-rev-sync-2.0.0.tgz",
    "hash": "82fb77d9281efe7e7947569380dda4d1c19f4cb3",
    "integrity": "sha512-vnHFv2eocTmt/wHqZm3ksxtVshK4vptT0cEoumk6hAYRFx3do6Qo7xHBTBCv29+r3ZZCQOQ1i328MUCsYF7AUw==",
    "registry": "npm",
    "packageName": "git-rev-sync",
    "cacheIntegrity": "sha512-vnHFv2eocTmt/wHqZm3ksxtVshK4vptT0cEoumk6hAYRFx3do6Qo7xHBTBCv29+r3ZZCQOQ1i328MUCsYF7AUw== sha1-gvt32Sge/n55R1aTgN2k0cGfTLM="
  },
  "registry": "npm",
  "hash": "82fb77d9281efe7e7947569380dda4d1c19f4cb3"
}