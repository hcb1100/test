{
  "manifest": {
    "name": "apollo-upload-client",
    "version": "11.0.0",
    "description": "A terminating Apollo Link for Apollo Client that allows FileList, File, Blob or ReactNativeFile instances within query or mutation variables and sends GraphQL multipart requests.",
    "license": "MIT",
    "author": {
      "name": "Jayden Seric",
      "email": "me@jaydenseric.com",
      "url": "https://jaydenseric.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jaydenseric/apollo-upload-client.git"
    },
    "homepage": "https://github.com/jaydenseric/apollo-upload-client#readme",
    "bugs": {
      "url": "https://github.com/jaydenseric/apollo-upload-client/issues"
    },
    "keywords": [
      "graphql",
      "multipart",
      "request",
      "file",
      "upload",
      "apollo",
      "client",
      "link",
      "react",
      "native"
    ],
    "files": [
      "lib"
    ],
    "main": "lib",
    "sideEffects": false,
    "engines": {
      "node": ">=8.5"
    },
    "browserslist": "> 0.5%, not dead, node >= 8.5",
    "dependencies": {
      "@babel/runtime": "^7.5.4",
      "apollo-link": "^1.2.12",
      "apollo-link-http-common": "^0.2.14",
      "extract-files": "^5.0.1"
    },
    "devDependencies": {
      "@babel/cli": "^7.5.0",
      "@babel/core": "^7.5.4",
      "@babel/plugin-transform-runtime": "^7.5.0",
      "@babel/preset-env": "^7.5.4",
      "babel-eslint": "^10.0.2",
      "eslint": "^6.0.1",
      "eslint-config-env": "^6.0.0",
      "eslint-config-prettier": "^6.0.0",
      "eslint-plugin-import": "^2.18.0",
      "eslint-plugin-import-order-alphabetical": "^0.0.2",
      "eslint-plugin-node": "^9.1.0",
      "eslint-plugin-prettier": "^3.1.0",
      "graphql": "^14.4.2",
      "husky": "^3.0.0",
      "jsdoc-md": "^3.0.0",
      "lint-staged": "^9.1.0",
      "prettier": "^1.18.2",
      "size-limit": "^1.3.7"
    },
    "scripts": {
      "prepare": "npm run prepare:clean && npm run prepare:js && npm run prepare:jsdoc && npm run prepare:prettier",
      "prepare:clean": "rm -rf lib",
      "prepare:js": "babel src -d lib",
      "prepare:jsdoc": "jsdoc-md",
      "prepare:prettier": "prettier 'lib/**/*.js' readme.md --write",
      "test": "npm run test:eslint && npm run test:prettier && npm run test:size",
      "test:eslint": "eslint .",
      "test:prettier": "prettier '**/*.{json,yml,md}' -l",
      "test:size": "size-limit",
      "prepublishOnly": "npm test"
    },
    "_registry": "npm",
    "_loc": "/home/tel/.cache/yarn/v6/npm-apollo-upload-client-11.0.0-465a2ed5756e6155f53befaf82d17bdb08c82060-integrity/node_modules/apollo-upload-client/package.json",
    "readmeFilename": "readme.md",
    "readme": "![Apollo upload logo](https://cdn.jsdelivr.net/gh/jaydenseric/apollo-upload-client@1.0.0/apollo-upload-logo.svg)\n\n# apollo-upload-client\n\n[![npm version](https://badgen.net/npm/v/apollo-upload-client)](https://npm.im/apollo-upload-client) [![Build status](https://travis-ci.org/jaydenseric/apollo-upload-client.svg?branch=master)](https://travis-ci.org/jaydenseric/apollo-upload-client)\n\nA terminating [Apollo Link](https://apollographql.com/docs/link) for [Apollo Client](https://apollographql.com/docs/link#apollo-client) that allows [`FileList`](https://developer.mozilla.org/docs/web/api/filelist), [`File`](https://developer.mozilla.org/docs/web/api/file), [`Blob`](https://developer.mozilla.org/docs/web/api/blob) or [`ReactNativeFile`](#class-reactnativefile) instances within query or mutation variables and sends [GraphQL multipart requests](https://github.com/jaydenseric/graphql-multipart-request-spec).\n\n## Setup\n\nInstall with [npm](https://npmjs.com):\n\n```shell\nnpm install apollo-upload-client\n```\n\n[Apollo Boost](https://npm.im/apollo-boost) doesn’t allow link customization; if you are using it [migrate to a manual Apollo Client setup](https://apollographql.com/docs/react/advanced/boost-migration).\n\n[Apollo Client](https://apollographql.com/docs/link#apollo-client) can only have 1 “terminating” [Apollo Link](https://apollographql.com/docs/link) that sends the GraphQL requests; if one such as [`apollo-link-http`](https://apollographql.com/docs/link/links/http) is already setup, remove it.\n\nInitialize the client with a terminating link using [`createUploadLink`](#function-createuploadlink).\n\nAlso ensure the GraphQL server implements the [GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec) and that uploads are handled correctly in resolvers.\n\n## Usage\n\nUse [`FileList`](https://developer.mozilla.org/docs/web/api/filelist), [`File`](https://developer.mozilla.org/docs/web/api/file), [`Blob`](https://developer.mozilla.org/docs/web/api/blob) or [`ReactNativeFile`](#class-reactnativefile) instances anywhere within query or mutation variables to send a [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec).\n\nSee also the [example API and client](https://github.com/jaydenseric/apollo-upload-examples).\n\n### [`FileList`](https://developer.mozilla.org/docs/web/api/filelist)\n\n```jsx\nconst gql = require('graphql-tag')\nconst { Mutation } = require('react-apollo')\n\nconst UploadFiles = () => (\n  <Mutation\n    mutation={gql`\n      mutation($files: [Upload!]!) {\n        uploadFiles(files: $files) {\n          success\n        }\n      }\n    `}\n  >\n    {mutate => (\n      <input\n        type=\"file\"\n        multiple\n        required\n        onChange={({ target: { validity, files } }) =>\n          validity.valid && mutate({ variables: { files } })\n        }\n      />\n    )}\n  </Mutation>\n)\n```\n\n### [`File`](https://developer.mozilla.org/docs/web/api/file)\n\n```jsx\nconst gql = require('graphql-tag')\nconst { Mutation } = require('react-apollo')\n\nconst UploadFile = () => (\n  <Mutation\n    mutation={gql`\n      mutation($file: Upload!) {\n        uploadFile(file: $file) {\n          success\n        }\n      }\n    `}\n  >\n    {mutate => (\n      <input\n        type=\"file\"\n        required\n        onChange={({\n          target: {\n            validity,\n            files: [file]\n          }\n        }) => validity.valid && mutate({ variables: { file } })}\n      />\n    )}\n  </Mutation>\n)\n```\n\n### [`Blob`](https://developer.mozilla.org/docs/web/api/blob)\n\n```jsx\nconst gql = require('graphql-tag')\n\n// Apollo Client instance.\nconst client = require('./client')\n\nconst file = new Blob(['Foo.'], { type: 'text/plain' })\n\n// Optional, defaults to `blob`.\nfile.name = 'bar.txt'\n\nclient.mutate({\n  mutation: gql`\n    mutation($file: Upload!) {\n      uploadFile(file: $file) {\n        success\n      }\n    }\n  `,\n  variables: { file }\n})\n```\n\n## Support\n\n- Node.js v8.5+\n- Browsers [`> 0.5%, not dead`](https://browserl.ist/?q=%3E+0.5%25%2C+not+dead)\n- React Native\n\n## API\n\n### Table of contents\n\n- [class ReactNativeFile](#class-reactnativefile)\n  - [Examples](#examples)\n- [function createUploadLink](#function-createuploadlink)\n  - [See](#see)\n  - [Examples](#examples-1)\n- [type FetchOptions](#type-fetchoptions)\n  - [See](#see-1)\n- [type ReactNativeFileSubstitute](#type-reactnativefilesubstitute)\n  - [See](#see-2)\n  - [Examples](#examples-2)\n\n### class ReactNativeFile\n\nUsed to mark a [React Native `File` substitute](#type-reactnativefilesubstitute). It’s too risky to assume all objects with `uri`, `type` and `name` properties are files to extract. Re-exported from [`extract-files`](https://npm.im/extract-files) for convenience.\n\n| Parameter | Type | Description |\n| :-- | :-- | :-- |\n| `file` | [ReactNativeFileSubstitute](#type-reactnativefilesubstitute) | A React Native [`File`](https://developer.mozilla.org/docs/web/api/file) substitute. |\n\n#### Examples\n\n_A React Native file that can be used in query or mutation variables._\n\n> ```js\n> const { ReactNativeFile } = require('apollo-upload-client')\n>\n> const file = new ReactNativeFile({\n>   uri: uriFromCameraRoll,\n>   name: 'a.jpg',\n>   type: 'image/jpeg'\n> })\n> ```\n\n---\n\n### function createUploadLink\n\nCreates a terminating [Apollo Link](https://apollographql.com/docs/link) capable of file uploads. Options match [`createHttpLink`](https://apollographql.com/docs/link/links/http#options).\n\n| Parameter | Type | Description |\n| :-- | :-- | :-- |\n| `options` | Object | Options. |\n| `options.uri` | string? = `/graphql` | GraphQL endpoint URI. |\n| `options.fetch` | function? | [`fetch`](https://fetch.spec.whatwg.org) implementation to use, defaulting to the `fetch` global. |\n| `options.fetchOptions` | [FetchOptions](#type-fetchoptions)? | `fetch` options; overridden by upload requirements. |\n| `options.credentials` | string? | Overrides `options.fetchOptions.credentials`. |\n| `options.headers` | Object? | Merges with and overrides `options.fetchOptions.headers`. |\n| `options.includeExtensions` | boolean? = `false` | Toggles sending `extensions` fields to the GraphQL server. |\n\n**Returns:** ApolloLink — A terminating [Apollo Link](https://apollographql.com/docs/link) capable of file uploads.\n\n#### See\n\n- [GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec).\n- [apollo-link on GitHub](https://github.com/apollographql/apollo-link).\n\n#### Examples\n\n_A basic Apollo Client setup._\n\n> ```js\n> const { ApolloClient } = require('apollo-client')\n> const { InMemoryCache } = require('apollo-cache-inmemory')\n> const { createUploadLink } = require('apollo-upload-client')\n>\n> const client = new ApolloClient({\n>   cache: new InMemoryCache(),\n>   link: createUploadLink()\n> })\n> ```\n\n---\n\n### type FetchOptions\n\nGraphQL request `fetch` options.\n\n**Type:** Object\n\n| Property      | Type    | Description                      |\n| :------------ | :------ | :------------------------------- |\n| `headers`     | Object  | HTTP request headers.            |\n| `credentials` | string? | Authentication credentials mode. |\n\n#### See\n\n- [Polyfillable fetch options](https://github.github.io/fetch#options).\n\n---\n\n### type ReactNativeFileSubstitute\n\nA React Native [`File`](https://developer.mozilla.org/docs/web/api/file) substitute.\n\nBe aware that inspecting network requests with Chrome dev tools interferes with the React Native `FormData` implementation, causing network errors.\n\n**Type:** Object\n\n| Property | Type | Description |\n| :-- | :-- | :-- |\n| `uri` | String | Filesystem path. |\n| `name` | String? | File name. |\n| `type` | String? | File content type. Some environments (particularly Android) require a valid MIME type; Expo `ImageResult.type` is unreliable as it can be just `image`. |\n\n#### See\n\n- [`extract-files` docs](https://github.com/jaydenseric/extract-files#type-reactnativefilesubstitute).\n- [React Native `FormData` polyfill source](https://github.com/facebook/react-native/blob/v0.45.1/Libraries/Network/FormData.js#L34).\n\n#### Examples\n\n_A camera roll file._\n\n> ```js\n> {\n>   uri: uriFromCameraRoll,\n>   name: 'a.jpg',\n>   type: 'image/jpeg'\n> }\n> ```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/apollo-upload-client/-/apollo-upload-client-11.0.0.tgz#465a2ed5756e6155f53befaf82d17bdb08c82060",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/apollo-upload-client/-/apollo-upload-client-11.0.0.tgz",
    "hash": "465a2ed5756e6155f53befaf82d17bdb08c82060",
    "integrity": "sha512-JChTrBi1VSF8u6OPrkWUApJlyUvzwhw98kqRB3fSi7/CU6z0OUD42Mee9s5h8mfjKEfOanK6GNZhF4t2tIPXSw==",
    "registry": "npm",
    "packageName": "apollo-upload-client",
    "cacheIntegrity": "sha512-JChTrBi1VSF8u6OPrkWUApJlyUvzwhw98kqRB3fSi7/CU6z0OUD42Mee9s5h8mfjKEfOanK6GNZhF4t2tIPXSw== sha1-Rlou1XVuYVX1O++vgtF72wjIIGA="
  },
  "registry": "npm",
  "hash": "465a2ed5756e6155f53befaf82d17bdb08c82060"
}