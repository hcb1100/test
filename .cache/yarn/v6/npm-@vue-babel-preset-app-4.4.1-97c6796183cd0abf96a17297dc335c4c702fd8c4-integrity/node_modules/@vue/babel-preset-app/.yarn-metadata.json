{
  "manifest": {
    "name": "@vue/babel-preset-app",
    "version": "4.4.1",
    "description": "babel-preset-app for vue-cli",
    "main": "index.js",
    "publishConfig": {
      "access": "public"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/vuejs/vue-cli.git",
      "directory": "packages/@vue/babel-preset-app"
    },
    "keywords": [
      "vue",
      "cli"
    ],
    "author": {
      "name": "Evan You"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/vuejs/vue-cli/issues"
    },
    "homepage": "https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/babel-preset-app#readme",
    "dependencies": {
      "@babel/core": "^7.9.6",
      "@babel/helper-compilation-targets": "^7.9.6",
      "@babel/helper-module-imports": "^7.8.3",
      "@babel/plugin-proposal-class-properties": "^7.8.3",
      "@babel/plugin-proposal-decorators": "^7.8.3",
      "@babel/plugin-syntax-dynamic-import": "^7.8.3",
      "@babel/plugin-syntax-jsx": "^7.8.3",
      "@babel/plugin-transform-runtime": "^7.9.6",
      "@babel/preset-env": "^7.9.6",
      "@babel/runtime": "^7.9.6",
      "@vue/babel-preset-jsx": "^1.1.2",
      "babel-plugin-dynamic-import-node": "^2.3.3",
      "core-js": "^3.6.5",
      "core-js-compat": "^3.6.5",
      "semver": "^6.1.0"
    },
    "peerDependencies": {
      "@babel/core": "*",
      "core-js": "^3"
    },
    "peerDependenciesMeta": {
      "core-js": {
        "optional": true
      }
    },
    "gitHead": "34f303b0b6a03f96e8c21d308931219154a7e627",
    "_registry": "npm",
    "_loc": "/home/tel/.cache/yarn/v6/npm-@vue-babel-preset-app-4.4.1-97c6796183cd0abf96a17297dc335c4c702fd8c4-integrity/node_modules/@vue/babel-preset-app/package.json",
    "readmeFilename": "README.md",
    "readme": "# @vue/babel-preset-app\n\nThis is the default Babel preset used in all Vue CLI projects. **Note: this preset is meant to be used exclusively in projects created via Vue CLI and does not consider external use cases.**\n\n## Included Features\n\n### [@babel/preset-env](https://new.babeljs.io/docs/en/next/babel-preset-env.html)\n\n`preset-env` automatically determines the transforms and polyfills to apply based on your browser target. See [Browser Compatibility](https://cli.vuejs.org/guide/browser-compatibility.html) section in docs for more details.\n\n- `modules: false`\n  - auto set to `'commonjs'` in Jest tests\n- [`useBuiltIns: 'usage'`](#usebuiltins)\n- `targets` is determined:\n  - using `browserslist` field in `package.json` when building for browsers\n  - set to `{ node: 'current' }` when running unit tests in Node.js\n- Includes `Promise` polyfill by default so that they are usable even in non-transpiled dependencies (only for environments that need it)\n\n### Stage 3 or Below\n\nOnly the following stage 3 or below features are supported (object rest spread is supported as part of `preset-env`):\n\n- [Dynamic Import Syntax](https://github.com/tc39/proposal-dynamic-import)\n- [Proposal Class Properties](https://babeljs.io/docs/en/next/babel-plugin-proposal-class-properties.html)\n- [Proposal Decorators (legacy)](https://babeljs.io/docs/en/next/babel-plugin-proposal-decorators.html)\n\nIf you need additional stage 3 or below features, you need to install and configure it yourself.\n\n### Vue JSX support\n\n- [@babel/plugin-syntax-jsx](https://github.com/babel/babel/tree/master/packages/babel-plugin-syntax-jsx)\n- [@vue/babel-preset-jsx](https://github.com/vuejs/jsx)\n\n### [@babel/plugin-transform-runtime](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime)\n\n`transform-runtime` avoids inlining helpers in every file. This is enabled for helpers only, since polyfills are handled by `babel-preset-env`.\n\n## Options\n\n- All options from [@babel/preset-env](https://babeljs.io/docs/en/next/babel-preset-env.html) are supported, with some of them having smarter defaults.\n\n### modules\n\n- Default:\n  - `false` when building with webpack\n  - `'commonjs'` when running tests in Jest.\n\nExplicitly set `modules` option for `babel-preset-env`. See [babel-preset-env docs](https://github.com/babel/babel/tree/master/packages/babel-preset-env#modules) for more details.\n\n### targets\n\n- Default:\n  - determined from `browserslist` field in `package.json` when building for browsers\n  - set to `{ node: 'current' }` when running unit tests in Node.js\n\nExplicitly set `targets` option for `babel-preset-env`. See [babel-preset-env docs](https://github.com/babel/babel/tree/master/packages/babel-preset-env#targets) for more details.\n\n### useBuiltIns\n\n- Default: `'usage'`\n- Allowed values: `'usage' | 'entry' | false`\n\nExplicitly set `useBuiltIns` option for `babel-preset-env`.\n\nThe default value is `'usage'`, which adds imports to polyfills based on the usage in transpiled code. For example, if you use `Object.assign` in your code, the corresponding polyfill will be auto-imported if your target environment does not supports it.\n\nIf you are building a library or web component instead of an app, you probably want to set this to `false` and let the consuming app be responsible for the polyfills.\n\nNote that the usage detection does not apply to your dependencies (which are excluded by `cli-plugin-babel` by default). If one of your dependencies need polyfills, you have a few options:\n\n1. **If the dependency is written in an ES version that your target environments do not support:** Add that dependency to the `transpileDependencies` option in `vue.config.js`. This would enable both syntax transforms and usage-based polyfill detection for that dependency.\n\n2. **If the dependency ships ES5 code and explicitly lists the polyfills needed:** you can pre-include the needed polyfills using the [polyfills](#polyfills) option for this preset.\n\n3. **If the dependency ships ES5 code, but uses ES6+ features without explicitly listing polyfill requirements (e.g. Vuetify):** Use `useBuiltIns: 'entry'` and then add `import '@babel/polyfill'` to your entry file. This will import **ALL** polyfills based on your `browserslist` targets so that you don't need to worry about dependency polyfills anymore, but will likely increase your final bundle size with some unused polyfills.\n\nSee [@babel/preset-env docs](https://new.babeljs.io/docs/en/next/babel-preset-env.html#usebuiltins-usage) for more details.\n\n### polyfills\n\n- Default: `['es.array.iterator', 'es.promise', 'es.object.assign', 'es.promise.finally']`\n\nA list of [core-js](https://github.com/zloirock/core-js) polyfills to pre-include when using `useBuiltIns: 'usage'`. **These polyfills are automatically excluded if they are not needed for your target environments**.\n\nUse this option when you have 3rd party dependencies that are not processed by Babel but have specific polyfill requirements (e.g. Axios and Vuex require Promise support).\n\n### jsx\n\n- Default: `true`.\n\nSet to `false` to disable JSX support. Or you can toggle [@vue/babel-preset-jsx](https://github.com/vuejs/jsx/tree/dev/packages/babel-preset-jsx) features here.\n\n### loose\n\n- Default: `false`.\n\nSetting this to `true` will generate code that is more performant but less spec-compliant.\n\n### entryFiles\n\n- Default: `[]`\n\nMulti page repo use `entryFiles` to ensure inject polyfills to all entry file.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017-present, Yuxi (Evan) You\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@vue/babel-preset-app/-/babel-preset-app-4.4.1.tgz#97c6796183cd0abf96a17297dc335c4c702fd8c4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@vue/babel-preset-app/-/babel-preset-app-4.4.1.tgz",
    "hash": "97c6796183cd0abf96a17297dc335c4c702fd8c4",
    "integrity": "sha512-VHVROEBBiW0dnuNuzlFElkncXo+zxh5Px0MZ51Th5da8UPbQodf43mnpotMnFtmCPTXAFL58tzDttu1FgrgfpQ==",
    "registry": "npm",
    "packageName": "@vue/babel-preset-app",
    "cacheIntegrity": "sha512-VHVROEBBiW0dnuNuzlFElkncXo+zxh5Px0MZ51Th5da8UPbQodf43mnpotMnFtmCPTXAFL58tzDttu1FgrgfpQ== sha1-l8Z5YYPNCr+WoXKX3DNcTHAv2MQ="
  },
  "registry": "npm",
  "hash": "97c6796183cd0abf96a17297dc335c4c702fd8c4"
}