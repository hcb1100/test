{
  "manifest": {
    "name": "apollo-link-context",
    "version": "1.0.20",
    "description": "An easy way to set and cache context changes for Apollo Link",
    "author": {
      "name": "James Baxley",
      "email": "james@meteor.com"
    },
    "license": "MIT",
    "main": "./lib/index.js",
    "module": "./lib/bundle.esm.js",
    "typings": "./lib/index.d.ts",
    "sideEffects": false,
    "repository": {
      "type": "git",
      "url": "git+https://github.com/apollographql/apollo-link.git"
    },
    "bugs": {
      "url": "https://github.com/apollographql/apollo-link/issues"
    },
    "homepage": "https://github.com/apollographql/apollo-link#readme",
    "scripts": {
      "build": "tsc && rollup -c",
      "clean": "rimraf lib/* && rimraf coverage/*",
      "coverage": "jest --coverage",
      "filesize": "../../scripts/minify",
      "lint": "tslint -c \"../../tslint.json\" -p tsconfig.json -c ../../tslint.json src/*.ts",
      "prebuild": "npm run clean",
      "prepare": "npm run build",
      "test": "npm run lint && jest",
      "watch": "tsc -w -p . & rollup -c -w"
    },
    "dependencies": {
      "apollo-link": "^1.2.14",
      "tslib": "^1.9.3"
    },
    "devDependencies": {
      "@types/graphql": "14.2.3",
      "@types/jest": "24.9.0",
      "graphql": "15.0.0",
      "graphql-tag": "2.10.1",
      "jest": "24.9.0",
      "rimraf": "2.7.1",
      "rollup": "1.29.1",
      "ts-jest": "22.4.6",
      "tslint": "5.20.1",
      "typescript": "3.0.3"
    },
    "jest": {
      "transform": {
        ".(ts|tsx)": "ts-jest"
      },
      "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
      "moduleFileExtensions": [
        "ts",
        "tsx",
        "js",
        "json"
      ],
      "testURL": "http://localhost"
    },
    "gitHead": "1012934b4fd9ab436c4fdcd5e9b1bb1e4c1b0d98",
    "_registry": "npm",
    "_loc": "/home/tel/.cache/yarn/v6/npm-apollo-link-context-1.0.20-1939ac5dc65d6dff0c855ee53521150053c24676-integrity/node_modules/apollo-link-context/package.json",
    "readmeFilename": "README.md",
    "readme": "---\ntitle: apollo-link-context\ndescription: Easily set a context on your operation, which is used by other links further down the chain.\n---\n\nThe `setContext` function takes a function that returns either an object or a promise that returns an object to set the new context of a request.\n\nIt receives two arguments: the GraphQL request being executed, and the previous context. This link makes it easy to perform async look up of things like authentication tokens and more!\n\n```js\nimport { setContext } from \"apollo-link-context\";\n\nconst setAuthorizationLink = setContext((request, previousContext) => ({\n  headers: {authorization: \"1234\"}\n}));\n\nconst asyncAuthLink = setContext(\n  request =>\n    new Promise((success, fail) => {\n      // do some async lookup here\n      setTimeout(() => {\n        success({ token: \"async found token\" });\n      }, 10);\n    })\n);\n```\n\n## Caching lookups\n\nTypically async actions can be expensive and may not need to be called for every request, especially when a lot of request are happening at once. You can setup your own caching and invalidation outside of the link to make it faster but still flexible!\n\nTake for example a user auth token being found, cached, then removed on a 401 response:\n\n```js\nimport { setContext } from \"apollo-link-context\";\nimport { onError } from \"apollo-link-error\";\n\n// cached storage for the user token\nlet token;\nconst withToken = setContext(() => {\n  // if you have a cached value, return it immediately\n  if (token) return { token };\n\n  return AsyncTokenLookup().then(userToken => {\n    token = userToken;\n    return { token };\n  });\n});\n\nconst resetToken = onError(({ networkError }) => {\n  if (networkError && networkError.name ==='ServerError' && networkError.statusCode === 401) {\n    // remove cached token on 401 from the server\n    token = null;\n  }\n});\n\nconst authFlowLink = withToken.concat(resetToken);\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 - 2017 Meteor Development Group, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/apollo-link-context/-/apollo-link-context-1.0.20.tgz#1939ac5dc65d6dff0c855ee53521150053c24676",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/apollo-link-context/-/apollo-link-context-1.0.20.tgz",
    "hash": "1939ac5dc65d6dff0c855ee53521150053c24676",
    "integrity": "sha512-MLLPYvhzNb8AglNsk2NcL9AvhO/Vc9hn2ZZuegbhRHGet3oGr0YH9s30NS9+ieoM0sGT11p7oZ6oAILM/kiRBA==",
    "registry": "npm",
    "packageName": "apollo-link-context",
    "cacheIntegrity": "sha512-MLLPYvhzNb8AglNsk2NcL9AvhO/Vc9hn2ZZuegbhRHGet3oGr0YH9s30NS9+ieoM0sGT11p7oZ6oAILM/kiRBA== sha1-GTmsXcZdbf8MhV7lNSEVAFPCRnY="
  },
  "registry": "npm",
  "hash": "1939ac5dc65d6dff0c855ee53521150053c24676"
}